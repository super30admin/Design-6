class TrieNode:
    def __init__(self):
        self.children = dict()
        self.three = []
class Trie:
    def __init__(self):
        self.root = TrieNode()
    def add(self, sentence, time):        
        node = self.root
        for c in sentence:
            if c not in node.children:
                node.children[c] = TrieNode()
            node = node.children[c]    
            for i, (t, s) in enumerate(node.three):
                if s == sentence:
                    tmp = node.three[:]
                    tmp[i][0] = time
                    break
            else:    
                tmp = node.three + [[time, sentence]]
            node.three = sorted(tmp, key=lambda x: (-x[0], x[1]))[:3]
class AutocompleteSystem:
    def __init__(self, sentences: List[str], times: List[int]):
        self.d = collections.Counter()
        self.trie = Trie()
        self.node = self.trie.root
        for sentence, time in zip(sentences, times):
            self.d[sentence] += time       
            self.trie.add(sentence, time)       
        self.cur = ''
        self.prefix_none = False
    def input(self, c: str) -> List[str]:       
        if c == '#':
            self.node = self.trie.root
            self.d[self.cur] += 1
            self.trie.add(self.cur, self.d[self.cur])
            self.cur = ''
            self.prefix_none = False
            return []
        self.cur += c
        if c not in self.node.children or self.prefix_none:
            self.prefix_none = True
            return []
        self.prefix_none = False
        self.node = self.node.children[c]
        return [word for _, word in self.node.three]
    
# Time Complexity: O(n^2)
# Space Complexity: O(n)
# Successfully implemented on Leetcode
