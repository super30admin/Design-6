Approach 1 : Brute Force using Hashmap and Priority Queue
Time Complexity : O(nlogk)
Space Complexity : 
class AutocompleteSystem {
    HashMap<String,Integer> map;
    String input;

    public AutocompleteSystem(String[] sentences, int[] times) {
        // Constructor . Here we are building our hashmap with the list of sentences.Recording the historical data.
        input="";
        map=new HashMap<>();
        for(int i=0;i<sentences.length;i++){
        map.put(sentences[i],map.getOrDefault(sentences[i],0)+times[i]);
        }
    }
    
    public List<String> input(char c) {
        if (c == '#'){
            map.put(input,map.getOrDefault(input,0)+1);
            input = ""; // Resetting the input
            return new ArrayList<>(); // Return list of strings.          
        }
                  
        PriorityQueue<Pair> pq=new PriorityQueue<>((a,b)->{
            if(a.count==b.count){
                return b.sentence.compareTo(a.sentence); //Lexiographically entering into //Queue
        } 
         return a.count-b.count; 
            
        });
        input+=c;
        for(String key:map.keySet()){
            if(key.startsWith(input)){
                pq.add(new Pair(key,map.get(key)));
                if(pq.size()>3){// PQ of size 3
                    pq.poll();// Lexigraphically worst element
                }
            }
        }
        List<String> result=new ArrayList<>();
        while(!pq.isEmpty()){
            result.add(0,pq.poll().sentence);
        }
        return result;
        
    }
    class Pair {
        String sentence;
        int count;
        public Pair(String sentence,int count){
            this.sentence=sentence;
            this.count=count;
        }        
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */
 Approach 2 : Using Trie Data Strcuture
 Time COmplexity : O(n)
 Space Complexity :
 
 
